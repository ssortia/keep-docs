import { args, BaseCommand, flags } from '@adonisjs/core/ace'
import type { CommandOptions } from '@adonisjs/core/types/ace'
import User from '#models/user'
import ApiClient from '#models/api_client'
import { TokenService } from '#services/token_service'

export default class GenerateSchemaToken extends BaseCommand {
  static commandName = 'generate:schema-token'
  static description = '–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±–µ—Å—Å—Ä–æ—á–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —É–∫–∞–∑–∞–Ω–Ω—ã–º —Å—Ö–µ–º–∞–º'

  static options: CommandOptions = {
    startApp: true,
    allowUnknownFlags: false,
    staysAlive: false,
  }

  @args.string({ description: 'Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' })
  declare userEmail: string

  @args.string({ description: '–ù–∞–∑–≤–∞–Ω–∏–µ API –∫–ª–∏–µ–Ω—Ç–∞' })
  declare clientName: string

  @flags.array({ description: '–°–ø–∏—Å–æ–∫ —Å—Ö–µ–º –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)', alias: 's' })
  declare schemas: string[]

  @flags.string({ description: '–û–ø–∏—Å–∞–Ω–∏–µ API –∫–ª–∏–µ–Ω—Ç–∞', alias: 'd' })
  declare description?: string

  @flags.boolean({ description: '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ API –∫–ª–∏–µ–Ω—Ç–∞ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', alias: 'c' })
  declare createClient: boolean

  async run() {
    const tokenService = new TokenService()

    try {
      // –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      let user = await User.findBy('email', this.userEmail)

      if (!user) {
        const fullName = this.userEmail.split('@')[0]
        const password = Math.random().toString(36).slice(-12)

        user = await User.create({
          email: this.userEmail,
          fullName,
          password,
          isEmailVerified: true,
        })

        this.logger.success(`–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.email}`)
        this.logger.info(`–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å: ${password}`)
      } else {
        this.logger.info(`–ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.email}`)
      }
      // –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º API –∫–ª–∏–µ–Ω—Ç–∞
      let client = await ApiClient.query()
        .where('name', this.clientName)
        .where('createdBy', user.id)
        .first()

      if (!client) {
        if (this.createClient) {
          if (!this.schemas || this.schemas.length === 0) {
            this.logger.error(
              '–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Å—Ö–µ–º—ã —á–µ—Ä–µ–∑ --schemas'
            )
            return
          }

          client = await ApiClient.create({
            name: this.clientName,
            description: this.description || `API –∫–ª–∏–µ–Ω—Ç ${this.clientName}`,
            allowedSchemas: this.schemas,
            createdBy: user.id,
            active: true,
          })

          this.logger.success(`–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π API –∫–ª–∏–µ–Ω—Ç: ${client.name}`)
        } else {
          this.logger.error(
            `API –∫–ª–∏–µ–Ω—Ç '${this.clientName}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–ª–∞–≥ --create-client –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è`
          )
          return
        }
      }

      if (!client.active) {
        this.logger.error(`API –∫–ª–∏–µ–Ω—Ç '${this.clientName}' –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω`)
        return
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
      const token = await tokenService.generateSchemaAccessToken(user, client.id, this.schemas)

      // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      this.logger.success('–¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!')
      this.logger.info('')
      this.logger.info('üîë –¢–û–ö–ï–ù:')
      this.logger.info(`${token}`)
      this.logger.info('')
      this.logger.info('üìã –ò–ù–§–û–†–ú–ê–¶–ò–Ø:')
      this.logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.email}`)
      this.logger.info(`API –∫–ª–∏–µ–Ω—Ç: ${client.name}`)
      this.logger.info(`–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ö–µ–º—ã: ${this.schemas || client.allowedSchemas}`)
      this.logger.info(`–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: –±–µ—Å—Å—Ä–æ—á–Ω—ã–π`)
      this.logger.info('')
      this.logger.info('üí° –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:')
      this.logger.info(`Bearer —Ç–æ–∫–µ–Ω: ${token}`)
    } catch (error) {
      console.log(error)
      this.logger.error(`–û—à–∏–±–∫–∞: ${error.message}`)
    }
  }
}
